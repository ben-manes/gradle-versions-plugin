import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile

plugins {
  alias(libs.plugins.kotlin.jvm)
  alias(libs.plugins.dokka) apply false
  alias(libs.plugins.ktlint) apply false
  alias(libs.plugins.plugin.publish) apply false
  alias(libs.plugins.versions)
  id 'java-gradle-plugin'
  id 'java-library'
  id 'groovy'
}

allprojects {
  configurations.configureEach {
    resolutionStrategy {
      preferProjectModules()

      enableDependencyVerification()
    }
  }
}

subprojects {
  tasks.withType(Jar).configureEach {
    manifest {
      attributes(
        'Implementation-Title': POM_NAME,
        'Implementation-Version': VERSION_NAME,
        'Built-By': System.getProperty('user.name'),
        'Built-JDK': System.getProperty('java.version'),
        'Built-Gradle': gradle.gradleVersion)
    }
  }

  tasks.withType(KotlinJvmCompile).configureEach {
    compilerOptions {
      jvmTarget.set(JvmTarget.JVM_1_8)
    }
  }

  tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configure(options) {
      compilerArgs << '-Xlint:all'
      compilerArgs << '-Xlint:-options'
      encoding = 'utf-8'
      fork = true
    }
  }

  tasks.withType(GroovyCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configure(options) {
      compilerArgs << '-Xlint:all'
      compilerArgs << '-Xlint:-options'
      encoding = 'utf-8'
      fork = true
    }
  }

  tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
      exceptionFormat 'full'
      showCauses true
      showExceptions true
      showStackTraces true
      showStandardStreams true
      events 'passed', 'failed', 'skipped'
    }

    def maxWorkerCount = gradle.startParameter.maxWorkerCount
    maxParallelForks = (maxWorkerCount < 2) ? 1 : maxWorkerCount / 2
  }
}
