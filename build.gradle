buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.7.1'
  }
}

plugins {
  id "com.jfrog.bintray" version "1.8.4"
}

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'nexus'
apply plugin: 'codenarc'

group = 'com.github.ben-manes'
version = '0.36.0'

sourceCompatibility = '1.8'

repositories {
  mavenCentral()
}

tasks.wrapper {
  distributionType 'all'
}

codenarcMain {
  configFile = file('config/codenarc/rules.groovy')
}

codenarcTest {
  configFile = file('config/codenarc/testrules.groovy')
}

codenarc {
  toolVersion = 0.21
}

tasks.withType(CodeNarc) { codeNarcTask ->
  codeNarcTask.ignoreFailures = true
}

dependencies {
  implementation gradleApi()

  implementation 'com.thoughtworks.xstream:xstream:1.4.14'
  testImplementation gradleTestKit()
  testImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
    exclude(module: 'groovy-all')
  }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

// Add the classpath file to the test runtime classpath
dependencies {
  testRuntimeOnly files(createClasspathManifest)
}

jar {
  manifest {
    attributes 'Implementation-Title': 'Gradle Versions plugin',
      'Implementation-Version': version,
      'Built-By': System.getProperty('user.name'),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion
  }
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
  classifier = 'javadoc'
  from groovydoc.destinationDir
}

artifacts {
  archives groovydocJar
}

tasks.withType(Test) {
  maxParallelForks Runtime.getRuntime().availableProcessors()

  testLogging {
    events "passed", "failed", "skipped"
    showStandardStreams true
    exceptionFormat "full"
  }
}

modifyPom {
  project {
    name 'Gradle Versions plugin'
    description 'Gradle plugin that provides tasks for discovering dependency updates.'
    url 'https://github.com/ben-manes/gradle-versions-plugin'
    inceptionYear '2012'

    scm {
      url 'https://github.com/ben-manes/gradle-versions-plugin'
      connection 'scm:https://ben-manes@github.com/ben-manes/gradle-versions-plugin.git'
      developerConnection 'scm:git://github.com/ben-manes/gradle-versions-plugin.git'
    }

    licenses {
      license {
        name 'The Apache Software License, Version 2.0'
        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        distribution 'repo'
      }
    }

    developers {
      developer {
        id 'ben-manes'
        name 'Ben Manes'
        email 'ben.manes@gmail.com'
      }
      developer {
        id 'zenedith'
        name 'Zenedith'
        email 'zenedith@wp.pl'
      }
      developer {
        id 'jochenberger'
        name 'Jochen Berger'
      }
    }
  }
}

bintray {
  user = project.properties['BINTRAY_USERNAME'] ?: System.getenv('BINTRAY_USERNAME')
  key = project.properties['BINTRAY_API_KEY'] ?: System.getenv('BINTRAY_API_KEY')
  configurations = ['archives']
  publish = true
  pkg {
    repo = 'maven'
    name = 'com.github.ben-manes:gradle-versions-plugin'
    version {
      attributes = ['gradle-plugin': 'com.github.ben-manes.versions:com.github.ben-manes:gradle-versions-plugin']
    }
  }
}
