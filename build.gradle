plugins {
  id 'com.gradle.plugin-publish' version '0.21.0'
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'codenarc'
  id 'groovy'
}

repositories {
  mavenCentral()
}

group = GROUP
version = VERSION_NAME

buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

codenarcMain {
  configFile = file('config/codenarc/rules.groovy')
}

codenarcTest {
  configFile = file('config/codenarc/testRules.groovy')
}

tasks.withType(CodeNarc) { codeNarcTask ->
  codeNarcTask.ignoreFailures = true
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

// Add the classpath file to the test runtime classpath
dependencies {
  compileOnly gradleApi()

  implementation localGroovy()
  implementation project(':api')
  implementation 'com.thoughtworks.xstream:xstream:1.4.19'

  testRuntimeOnly files(createClasspathManifest)

  testImplementation localGroovy()
  testImplementation gradleTestKit()
  testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5', { exclude module: 'groovy-all' } // Use localGroovy()
}

jar {
  manifest {
    attributes(
      'Implementation-Title': POM_NAME,
      'Implementation-Version': VERSION_NAME,
      'Built-By': System.getProperty('user.name'),
      'Built-JDK': System.getProperty('java.version'),
      'Built-Gradle': gradle.gradleVersion
    )
  }
}

tasks.withType(JavaCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    encoding = 'utf-8'
    fork = true
  }
}

tasks.withType(GroovyCompile).configureEach {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8

  configure(options) {
    compilerArgs << '-Xlint:all'
    compilerArgs << '-Xlint:-options'
    encoding = 'utf-8'
    fork = true
  }
}

tasks.withType(Test) {
  maxParallelForks Runtime.getRuntime().availableProcessors()

  testLogging {
    events "passed", "failed", "skipped"
    showStandardStreams true
    exceptionFormat "full"
  }
}

task docsJar(type: Jar, dependsOn: groovydoc) {
  group = 'Publications'
  description = 'Create jar of documentation.'
  archiveClassifier = 'javadoc'
  from groovydoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  group = 'Publications'
  description = 'Create jar of sources.'
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

task testsJar(type: Jar) {
  group = 'Publications'
  description = 'Create jar of tests.'
  archiveClassifier = 'tests'
  from sourceSets.test.output
}

task reportsZip(type: Zip, dependsOn: check) {
  group = 'Publications'
  description = 'Create a zip of all reports.'
  archiveClassifier = 'reports'
  from reporting.baseDir
}

// Local published to ~/.m2 - mavenLocal() for testing
publishing {
  repositories {
    mavenLocal()
  }

  publications {
    pluginMaven(MavenPublication) {
      artifact docsJar
      artifact sourcesJar
      artifact testsJar
      artifact reportsZip

      pom {
        resolveStrategy = Closure.DELEGATE_FIRST
        name = POM_NAME
        description = POM_DESCRIPTION
        url = POM_URL
        inceptionYear = POM_INCEPTION_YEAR

        licenses {
          license {
            name = POM_LICENSE_NAME
            url = POM_LICENSE_URL
            distribution = POM_LICENSE_DIST
          }
        }

        developers {
          developer {
            id = 'ben-manes'
            name = 'Ben Manes'
            email = 'ben.manes@gmail.com'
          }
          developer {
            id = 'zenedith'
            name = 'Zenedith'
            email = 'zenedith@wp.pl'
          }
          developer {
            id = 'jochenberger'
            name = 'Jochen Berger'
          }
        }

        scm {
          url = POM_SCM_URL
          connection = POM_SCM_CONNECTION
          developerConnection = POM_SCM_DEV_CONNECTION
        }

        issueManagement {
          system = POM_ISSUE_SYSTEM
          url = POM_ISSUE_URL
        }
      }
    }
  }
}
publish.dependsOn jar, docsJar, sourcesJar, testsJar, reportsZip
publish.dependsOn 'generatePomFileForPluginMavenPublication'

pluginBundle {
  website = POM_URL
  vcsUrl = POM_SCM_URL
  tags = ['dependencies', 'versions', 'updates']
}
gradlePlugin {
  plugins {
    versionsPlugin {
      id = 'com.github.ben-manes.versions'
      displayName = POM_NAME
      implementationClass = 'com.github.benmanes.gradle.versions.VersionsPlugin'
      description = POM_DESCRIPTION
    }
  }
}
